# if having lb:service_name doesn't exist, try using '-' instead of '_' in the application name
spring.application.name=@project.name@

info.app.version=@project.version@
info.app.name=@project.name@
info.app.description=@project.description@
info.app.classification=UNCLASSIFIED

management.info.env.enabled=true
management.endpoints.web.base-path=/actuator
management.endpoint.gateway.access=unrestricted

spring.devtools.livereload.enabled=false

management.endpoints.web.exposure.include=health,info,beans,bus-refresh,busrefresh,gateway,mappings

server.port=8080

spring.main.web-application-type=reactive
eureka.client.refresh.enable=true
spring.docker.compose.file=@project.basedir@/compose.yaml

# We don't really need to register with Eureka Server as we will run on a 'static' port, and want us to be static
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.default-zone=http://localhost:8761/eureka

# What you want to display in the Eureka Server for the name, this looks sleek
eureka.instance.instance-id=${spring.application.name}

# Must These two properties rationalise the ip-address at Eureka Discovery
eureka.instance.preferIpAddress=true

eureka.instance.hostname=localhost

# Config Server settings
spring.config.import=optional:configserver:http://localhost:8012
# RabbitMQ for spring bus
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=password

spring.cloud.gateway.enabled=true

# This property enable discovery locator feature, i.e. your applications will be discovered automatically
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# Header value is a simple 'Java Regex'
#spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].uri=lb://api-users
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Date
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/api/users/status/check, /api/users/status/tested
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter=ROLE_USER

spring.cloud.gateway.routes[1].id=user-registration
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/register
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].uri=lb://api-users
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Date

spring.cloud.gateway.routes[2].id=user-login
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].uri=lb://api-users
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Date


#spring.cloud.loadbalancer.configurations=health-check
#spring.cloud.loadbalancer.health-check.interval=10s
spring.cloud.loadbalancer.x-forwarded.enabled=true